Using ``add_integer``
---------------------
this function receives 2 parameters 'a' and 'b' and returns the sum of these,
the default parameter 'b' is 98.

Step 1: import ``add_integer``
>>> add_integer = __import__('0-add_integer').add_integer

Typical case:
>>> add_integer(6, 9)
15

>>> add_integer(6.0, 9)
15

>>> add_integer(6, 9.0)
15

>>> add_integer(6.0, 9.0)
15

>>> add_integer(2)
100

>>> add_integer(2.0)
100

>>> add_integer(-6, 9)
3

>>> add_integer(-6, -9)
-15

>>> add_integer(6.3, -3)
3



Atypical cases:


>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'


>>> add_integer("a", 5)
Traceback (most recent call last):
TypeError: a must be an integer


>>> add_integer(6, "h")
Traceback (most recent call last):
TypeError: b must be an integer


>>> add_integer(3, (6, 7))
Traceback (most recent call last):
...
TypeError: b must be an integer


>>> add_integer((6, 7), 6)
Traceback (most recent call last):
...
TypeError: a must be an integer


>>> add_integer(6, True)
Traceback (most recent call last):
...
TypeError: b must be an integer


>>> add_integer(False, 6)
Traceback (most recent call last):
...
TypeError: a must be an integer


>>> add_integer(float('inf'), 10)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer


>>> add_integer(float('NaN'),)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
